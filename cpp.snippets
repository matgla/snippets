# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet copyright "Copyright disclaimers" b 
// This file is part of ${1} project.
// Copyright (C) `!v strftime("%Y")` Mateusz Stadnik
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

endsnippet 

snippet namespace "Namespace" b 
namespace ${1} 
{

} // namespace ${1}
endsnippet 

snippet pragma_once "Header guard" b 
#pragma once 

endsnippet 

snippet tempfun "Template function" b 
template <${1}> 
${2} ${3}(${4})
{
${0}
}
endsnippet

snippet c_header "C++ compatible C header" b 
#pragma once

#ifdef __cplusplus 
extern "C"
{
#endif // __cplusplus 

${0}

#ifdef __cplusplus
}
#endif // __cplusplus
endsnippet
